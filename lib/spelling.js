// Generated by CoffeeScript 1.9.0
(function() {
  var R, find_edits1_of, find_edits2_of;

  R = require('ramda');

  find_edits1_of = function(word) {
    var alphabet, deletes, elem, i, inserts, letter, makeSet, replacements, splits, transpositions, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _m, _n, _o, _ref;
    alphabet = "abcdefghijklmnopqrstuvwxyz";
    splits = [];
    _ref = R.range(0, word.length + 1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      splits.push([word.slice(0, i), word.slice(i)]);
    }
    deletes = [];
    for (_j = 0, _len1 = splits.length; _j < _len1; _j++) {
      elem = splits[_j];
      deletes.push(elem[0] + elem[1].slice(1));
    }
    inserts = [];
    for (_k = 0, _len2 = alphabet.length; _k < _len2; _k++) {
      letter = alphabet[_k];
      for (_l = 0, _len3 = splits.length; _l < _len3; _l++) {
        elem = splits[_l];
        inserts.push(elem[0] + letter + elem[1]);
      }
    }
    replacements = [];
    for (_m = 0, _len4 = alphabet.length; _m < _len4; _m++) {
      letter = alphabet[_m];
      for (_n = 0, _len5 = splits.length; _n < _len5; _n++) {
        elem = splits[_n];
        if (elem[1]) {
          replacements.push(elem[0] + letter + elem[1].slice(1));
        }
      }
    }
    transpositions = [];
    for (_o = 0, _len6 = splits.length; _o < _len6; _o++) {
      elem = splits[_o];
      if (elem[1].length > 1) {
        transpositions.push(elem[0] + elem[1][1] + elem[1][0] + elem[1].slice(2));
      }
    }
    makeSet = R.compose(R.uniq, R.concat);
    return makeSet(deletes, inserts, replacements, transpositions);
  };

  find_edits2_of = function(word) {
    return R.pipe(find_edits1_of, R.map(function(w) {
      return find_edits1_of(w);
    }), R.flatten)(word);
  };

}).call(this);
